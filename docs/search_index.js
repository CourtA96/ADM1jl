var documenterSearchIndex = {"docs":
[{"location":"page3/#List-of-Functions","page":"List of Functions","title":"List of Functions","text":"","category":"section"},{"location":"page3/","page":"List of Functions","title":"List of Functions","text":"CurrentModule = ADM1jl","category":"page"},{"location":"page3/#Functions","page":"List of Functions","title":"Functions","text":"","category":"section"},{"location":"page3/","page":"List of Functions","title":"List of Functions","text":"ADM1sol(tspan::Tuple,u0::Vector,IV::Vector{Float64};alg = Rodas4P(), tols=1e-4,tMax = 300.0)","category":"page"},{"location":"page3/#ADM1jl.ADM1sol-Tuple{Tuple, Vector, Vector{Float64}}","page":"List of Functions","title":"ADM1jl.ADM1sol","text":"function ADM1sol(tspan::Tuple,u0::Vector,IV::Vector; <keyword arguments>)\n\nCompute the solution for the given timespan, tspan; initial condition, u0; and inflow vector IV.\n\nAlso return the time (in seconds) the solution took to compute. The difference between this function and ExampleSol is that this function reads in the parameter values from a .csv file.\n\nOptional Arguments\n\nalg = Rodas4P(): the ODE solver algorithm.\ntols = 1e-4: the absolute and relative tolerance of the solver method.\ntMax = 300.0: the maximum time (in seconds), that the function will run before timing out.\n\nExamples\n\njulia> u0 = ADM1jl.InitialConditions();\n\njulia> IV = ADM1jl.inflowvector_definition();\n\njulia> sol, tSol = ADM1jl.ADM1sol((0.0,200.0),u0,IV);\n\njulia> sol\nretcode: Success\nInterpolation: specialized 3rd order \"free\" stiffness-aware interpolation\nt: 146-element Vector{Float64}:\n[...]\n\nu: 146-element Vector{Vector{Float64}}:\n[...]\n\njulia> tSol\n0.3854937\n\n\n\n\n\n","category":"method"},{"location":"page3/","page":"List of Functions","title":"List of Functions","text":"RHSfun(du,u,p,t)","category":"page"},{"location":"page3/#ADM1jl.RHSfun-NTuple{4, Any}","page":"List of Functions","title":"ADM1jl.RHSfun","text":"RHSfun(du,u,p,t)\n\nReturn the right-hand side of the system of ODEs, this is an in-place function.\n\nArguments\n\ndu::Vector: the rate change of the state vector (required since the function is defined in-place).\nu::Vector: the state vector.\np::Vector: all of the model parameters.\nt: the timestep, usually a Float64.\n\n\n\n\n\n","category":"method"},{"location":"page3/","page":"List of Functions","title":"List of Functions","text":"reactionrates(bp,rp,php,pressures,sx,NREAC::Int)","category":"page"},{"location":"page3/#ADM1jl.reactionrates-Tuple{Any, Any, Any, Any, Any, Int64}","page":"List of Functions","title":"ADM1jl.reactionrates","text":"reactionrates(bp,rp,php,pressures,sx,NREAC::Int)\n\nCompute and return the vector of reaction rates.\n\nArguments\n\nbp::Vector: the biochemical parameters.\nrp::Vector: the reactor parameters.\nphp::Vector: the physiochemical parameters.\npressures::Vector: the gas pressures.\nsx::Vector: the state vector.\nNREAC::Integer: the number of reaction rates.\n\nExamples\n\njulia> u0 = ADM1jl.InitialConditions();\n\njulia> bp = ADM1jl.biochemicalparameter_definition();\n\njulia> rp = ADM1jl.reactorParameterDefinition();\n\njulia> php = ADM1jl.physiochemicalParameterDefinition(rp);\n\njulia> pressures = ADM1jl.pressureOfGasses(u0,php,rp);\n\njulia> NREAC = 29;\n\njulia> ADM1jl.reactionrates(bp,rp,php,pressures,u0,NREAC)\n29-element Vector{Real}:\n 0.155\n 0.28\n 1.0\n 0.29000000000000004\n 0.2950855111452082\n â‹®\n 0.0\n 7.402547081085608e-6\n 1.295220255437568\n 0.052518812965057435\n\n\n\n\n\n","category":"method"},{"location":"page3/","page":"List of Functions","title":"List of Functions","text":"pressureOfGasses(sx,php,rp)","category":"page"},{"location":"page3/#ADM1jl.pressureOfGasses-Tuple{Any, Any, Any}","page":"List of Functions","title":"ADM1jl.pressureOfGasses","text":"pressureOfGasses(sx,php,rp)\n\nCompute the pressures of the gasses.\n\nArguments\n\nsx::Vector: the state vector.\nphp::Vector: the physicochemical parameters.\nrp::Vector: the reactor parameters.\n\nExamples\n\njulia> u0 = ADM1jl.InitialConditions();\n\njulia> rp = ADM1jl.reactorParameterDefinition();\n\njulia> php = ADM1jl.physiochemicalParameterDefinition(rp);\n\njulia> ADM1jl.pressureOfGasses(u0,php,rp)\n5-element Vector{Float64}:\n    1.6333471490625e-5\n    0.6525381992578124\n    0.35869584449999997\n    1.0669181223042932\n 2695.9061152146637\n\n\n\n\n\n","category":"method"},{"location":"page3/","page":"List of Functions","title":"List of Functions","text":"monod(u, k)","category":"page"},{"location":"page3/#ADM1jl.monod-Tuple{Any, Any}","page":"List of Functions","title":"ADM1jl.monod","text":"monod(u, k)\n\nCompute the monod function u/(u+k) where u is the state varible and k is the half-saturation concentration.\n\nIf u <= 0 return 0.\n\nExamples\n\njulia> ADM1jl.monod(3.0,2.0) # when u is non-zero positive\n0.6\n\njulia> ADM1jl.monod(-3.0,2.0) # when u is negative\n0\n\n\n\n\n\n","category":"method"},{"location":"#Documentation-for-ADM1code.jl","page":"Home","title":"Documentation for ADM1code.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This is documentation for the Julia implementation of ADM1 written by Courtney Allen (University of Guelph) and Alexandra Mazanko (University of Guelph).","category":"page"},{"location":"","page":"Home","title":"Home","text":"This code has been used in the following paper:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Allen C, Mazanko A, Abdehagh N, Eberl HJ. \"A New ODE-Based Julia Implementation of the Anaerobic Digestion Model No. 1 Greatly Outperforms Existing DAE-Based Java and Python Implementations.\" Processes. 2023; 11(7):1899. https://doi.org/10.3390/pr11071899","category":"page"},{"location":"#Table-of-Contents","page":"Home","title":"Table of Contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"page2/#Getting-started","page":"Getting started","title":"Getting started","text":"","category":"section"},{"location":"page2/","page":"Getting started","title":"Getting started","text":"To solve ADM1 for a single tank reactor, just run ADM1sol. For multiple tanks running in parallel, use multichamberSolution","category":"page"},{"location":"page2/#Installation","page":"Getting started","title":"Installation","text":"","category":"section"},{"location":"page2/","page":"Getting started","title":"Getting started","text":"To install ADM1jl open the Julia REPL and run the following:","category":"page"},{"location":"page2/","page":"Getting started","title":"Getting started","text":"julia> using Pkg\njulia> Pkg.add(\"https://github.com/CourtA96/ADM1jl\")","category":"page"},{"location":"page2/","page":"Getting started","title":"Getting started","text":"OR enter the Pkg REPL by pressing ] and running:","category":"page"},{"location":"page2/","page":"Getting started","title":"Getting started","text":"add https://github.com/CourtA96/ADM1jl","category":"page"},{"location":"page2/","page":"Getting started","title":"Getting started","text":"Then, to use the package, run","category":"page"},{"location":"page2/","page":"Getting started","title":"Getting started","text":"julia> using ADM1jl","category":"page"},{"location":"page2/#Getting-Started","page":"Getting started","title":"Getting Started","text":"","category":"section"},{"location":"page2/","page":"Getting started","title":"Getting started","text":"Before beginning, make sure that the file model_parameters.csv is saved in your working directory. model_parameters.csv can be found on the github here. ","category":"page"},{"location":"page2/","page":"Getting started","title":"Getting started","text":"ADM1sol takes the timespan, initial conditions, and inflow vector as inputs. The timespan is length 2 and type Tuple{Float64}. It specifies how the initial and final times of the simulation. The initial conditions and inflow vector both have type Vector{Float64} and length 35.  To test this out, run the following code:","category":"page"},{"location":"page2/","page":"Getting started","title":"Getting started","text":"using ADM1jl\n\nu0 = ADM1jl.InitialConditions(); # assigns the default initial conditions to u0\n\nIV = ADM1jl.inflowvector_definition(); # assigns the default inflow vector to IV\n\ntspan = (0.0,200.0); # the solution will be computed from t=0.0 to t=200.0\n\nsol, tSol = ADM1jl.ADM1sol(tspan,u0,IV); # computes the solution  and saves it to sol, the time to solve is saved to tSol\n\nsol # the solution has two fields: t contains the timesteps and u contains the solution at each timestep\n\ntSol # this is the time ExampleSol took to solve the system\n","category":"page"},{"location":"page2/","page":"Getting started","title":"Getting started","text":"The initial conditions and inflow vector can be changed to any Vector{Float64} of length 35. For a version of the code that is even more flexible, use ADM1sol.","category":"page"},{"location":"page2/#Modifying-Parameters","page":"Getting started","title":"Modifying Parameters","text":"","category":"section"},{"location":"page2/","page":"Getting started","title":"Getting started","text":"To change the system parameters, such as T_base or P_atm, just open the file model_parameters.csv in the src directory. Edit whichever entries are necessary, save, and exit. Running ADM1sol again will solve the system with the updated parameters.","category":"page"},{"location":"page2/#State-Variables-and-their-Indices","page":"Getting started","title":"State Variables and their Indices","text":"","category":"section"},{"location":"page2/","page":"Getting started","title":"Getting started","text":"The follow table shows which state variable corresponds to each index.","category":"page"},{"location":"page2/","page":"Getting started","title":"Getting started","text":"Index State Variable\n1 S_su\n2 S_aa\n3 S_fa\n4 S_va\n5 S_bu\n6 S_pr\n7 S_ac\n8 S_h2\n9 S_ch4\n10 S_IC\n11 S_IN\n12 S_I\n13 X_xc\n14 X_ch\n15 X_pr\n16 X_li\n17 X_su\n18 X_aa\n19 X_fa\n20 X_c4\n21 X_pro\n22 X_ac\n23 X_h2\n24 X_I\n25 S_va_ion\n26 S_bu_ion\n27 S_pro_ion\n28 S_ac_ion\n29 S_hco3_ion\n30 S_nh3\n31 S_cat\n32 S_an\n33 S_gas_h2\n34 S_gas_ch4\n35 S_gas_co2","category":"page"}]
}
